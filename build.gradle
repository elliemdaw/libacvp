apply plugin : 'c'

model {
	repositories {
		libs(PrebuiltLibraries) {
			libcurl {
			  if (!System.getenv('WIN32').equals("TRUE")) {
					headers.srcDir System.getenv('CURL_DIR') + "/include"
					binaries.withType(SharedLibraryBinary) {
						sharedLibraryFile = file(System.getenv('CURL_DIR') + "/libcurl.a")
						sharedLibraryLinkFile = file(System.getenv('CURL_DIR') + "/lib/libcurl.so")
					}
				} else {
					headers.srcDir System.getenv('CURL_DIR') + "\\include"
					binaries.withType(SharedLibraryBinary) {
					  sharedLibraryFile = file(System.getenv('CURL_DIR') + "\\bin\\libcurl.dll")
						sharedLibraryLinkFile = file(System.getenv('CURL_DIR') + "\\lib\\libcurl.lib")
					}
				}
			}
			libssl {
				if (!System.getenv('WIN32').equals("TRUE")) {
					headers.srcDir System.getenv('SSL_DIR') + "/include"
					binaries.withType(SharedLibraryBinary) {
						sharedLibraryFile = file(System.getenv('SSL_DIR') + "/lib/libssl.a")
						sharedLibraryLinkFile = file(System.getenv('SSL_DIR') + "/lib/libssl.so")
					}
				} else {
					headers.srcDir System.getenv('SSL_DIR') + '\\include'
					binaries.withType(SharedLibraryBinary) {
					  sharedLibraryFile = file(System.getenv('SSL_DIR') + "\\bin\\libssl32.dll")
						sharedLibraryLinkFile = file(System.getenv('SSL_DIR') + "\\lib\\ssleay32.lib")
					}
				}
			}
			libcrypto {
				if (!System.getenv('WIN32').equals("TRUE")) {
				  headers.srcDir System.getenv('SSL_DIR') + "/include"
					binaries.withType(SharedLibraryBinary) {
						sharedLibraryFile = file(System.getenv('SSL_DIR') + "/lib/libcrypto.a")
						sharedLibraryLinkFile = file(System.getenv('SSL_DIR') + "/lib/libcrypto.so")
					}
				} else {
				  headers.srcDir System.getenv('SSL_DIR') + '\\include'
					binaries.withType(SharedLibraryBinary) {
					  sharedLibraryFile = file(System.getenv('SSL_DIR') + "\\bin\\libeay32.dll")
						sharedLibraryLinkFile = file(System.getenv('SSL_DIR') + "\\lib\\libeay32.lib")
					}
				}
			}
		}
	}
}

model {
	binaries {
		all {
			if (toolChain in Gcc) {
				cCompiler.args "-g", "-O0", "-Wall"
			} else {
				cCompiler.define "WIN32"
			}
		}
	}
}

model {
	components {
		acvp(NativeLibrarySpec) {
      sources {
          c {
              source {
							  if(System.getenv('DISABLE_SAFEC').equals("TRUE")) {
                  srcDir "safe_c_stub/src"
								}
                srcDir "src/acvp/c"
                include "*.c"
              }
              exportedHeaders {
                  srcDir "src/acvp/c"
									if(System.getenv('DISABLE_SAFEC').equals("TRUE")) {
                    srcDir "safe_c_stub/include"
									}
                  include "*.h"
              }
          }
      }
			binaries.all {
				lib library: 'libcurl', linkage: 'shared'
				lib library: 'libssl', linkage: 'shared'
			}
		}
		example(NativeExecutableSpec) {
			sources {
				c {
					source {
						srcDir "app"
						exclude "poc.json"
						exclude "README"
					}
				}
			}
			binaries.all {
				lib library: 'libcurl', linkage: 'shared'
				lib library: 'libcrypto', linkage: 'shared'
				lib library: 'libssl', linkage: 'shared'
				lib library: 'acvp', linkage: 'static'

			}
		}
	}
}
